package edu.nyu.cs.cs2580;

import java.io.IOException;
import java.io.File;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Vector;
import java.util.HashMap;
import java.util.Scanner;

import sun.reflect.generics.visitor.Reifier;

class Evaluator { 

 public static void main(String[] args) throws IOException {
    HashMap < String , HashMap < Integer , Double > > relevance_judgments =
      new HashMap < String , HashMap < Integer , Double > >();
    if (args.length < 1){
      System.out.println("need to provide relevance_judgments");
      return;
    }
    String p = args[0];
    // first read the relevance judgments into the HashMap
    readRelevanceJudgments(p,relevance_judgments);
    // now evaluate the results from stdin
    evaluateStdin(relevance_judgments);
  }

  public static void readRelevanceJudgments(
    String p,HashMap < String , HashMap < Integer , Double > > relevance_judgments){
    try {
      BufferedReader reader = new BufferedReader(new FileReader(p));
      try {
        String line = null;
        while ((line = reader.readLine()) != null){
          // parse the query,did,relevance line
          Scanner s = new Scanner(line).useDelimiter("\t");
          String query = s.next();
          int did = Integer.parseInt(s.next());
          String grade = s.next();
          double rel = 0.0;
          // convert to binary relevance
          if ((grade.equals("Perfect")) ||
            (grade.equals("Excellent")) ||
            (grade.equals("Good"))){
            rel = 1.0;
          }
          if (relevance_judgments.containsKey(query) == false){
            HashMap < Integer , Double > qr = new HashMap < Integer , Double >();
            relevance_judgments.put(query,qr);
          }
          HashMap < Integer , Double > qr = relevance_judgments.get(query);
          qr.put(did,rel);
        }
      } finally {
        reader.close();
      }
    } catch (IOException ioe){
      System.err.println("Oops " + ioe.getMessage());
    }
  }

  public static void evaluateStdin(
    HashMap < String , HashMap < Integer , Double > > relevance_judgments){
    // only consider one query per call    
	StringBuilder sb = new StringBuilder();
    try {
      BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
      List<Integer> l = new LinkedList<Integer>(); 
      l.add(1);
      l.add(5);
      l.add(10);
  
      ArrayList<Double> rr = new ArrayList<Double>();
      
      String line = null;
      double RR = 0.0;
      double N = 0.0;
      int i = 0;
      String q = null;
      while ((line = reader.readLine()) != null){
        Scanner s = new Scanner(line).useDelimiter("\t");
        String query = s.next();
        q = query;
        int did = Integer.parseInt(s.next());
      	String title = s.next();
      	double rel = Double.parseDouble(s.next());
      	if (relevance_judgments.containsKey(query) == false){
      	  throw new IOException("query not found");
      	}
      	HashMap < Integer , Double > qr = relevance_judgments.get(query);
      	if (qr.containsKey(did) != false){
      	  RR += qr.get(did);
      	}
      	rr.add(RR);
      	++N;
      }
      sb.append(q);
      sb.append('\t');
      
      List<Double> precision = new LinkedList<Double>();
      List<Double> recall = new LinkedList<Double>();
      List<Double> F = new LinkedList<Double>();
      double alfa = 0.50;
      for(int val : l)
      {
    	  Double x = rr.get(val-1);    	 
    	  precision.add(x/val);
    	  recall.add(x/RR);
    	  F.add(1.0/(alfa*val/x + (1.0-alfa)*RR/x));
      }
      
      for(double d : precision)
      {
    	  sb.append(d);
    	  sb.append('\t');
      }
      
      for(double d : recall)
      {
    	  sb.append(d);
    	  sb.append('\t');
      }
      
      for(double d : F)
      {
    	  sb.append(d);
    	  sb.append('\t');
      }
      
      //Average precision and reciprocal rank calculation
      double ap = rr.get(0);
      
      List<Double> recallprecision = new LinkedList<Double>();
      recallprecision.add(0.0);
      
      double reciprocal_rank = 0.0;
      if(rr.get(0) != 0) {
    	  reciprocal_rank = 1.0;
      }
      
      for(int z=0;z<11;z++) {
        recallprecision.add(0.0);
      }
      
      int recallPosition = 1;
      
      double counter=ap;
      
      for(int j=1;j<rr.size();j++) {
    	  double r = rr.get(j);
    	  if(rr.get(j-1) == r) {
    		  //we do nothing
    		  //average precision need not be calculated at non relevant documents
    	  }
    	  else {
    		  while((RR * 0.1 * recallPosition) <= counter) {
    		    recallprecision.set(recallPosition, r/(j+1));
    		    recallPosition++;
    		  }
    		  counter++;
    		  ap += r/(j+1);
    		  if(reciprocal_rank == 0) {
        	  reciprocal_rank = 1.0 / (j+1);
        	}
    	  }
      }
      
      for(int j = 0; j <= 10 && j < recallprecision.size(); j++) {
    	  sb.append(recallprecision.get(j));
    	  sb.append('\t');
      }
      ap = (ap/RR);
      
      sb.append(ap);
      sb.append('\t');
      
      //NDCG calculation
      //List<double> 
      //for(int j=0;j<10;j++)
      
      //ndcg append sb.append(b)
      
      sb.append(reciprocal_rank);
      sb.append("\n");
      
      System.out.println(sb.toString());
    } catch (Exception e){
      System.err.println("Error:" + e.getMessage());
    }
  }
}