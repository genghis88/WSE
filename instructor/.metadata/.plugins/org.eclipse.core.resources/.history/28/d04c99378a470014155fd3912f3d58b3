package edu.nyu.cs.cs2580;

import java.util.Iterator;
import java.util.Scanner;
import java.util.Vector;

public class QLRanker extends Ranker {
  
  private double lambda = 0.5;
  
  public QLRanker(String index_source) {
    super(index_source);
  }
  
  private getWordFrequency(String word) {
    int frequency = 0;
    Document d = _index.getDoc(did);
    Vector < String > dv = d.get_title_vector();
    for (int i = 0; i < dv.size(); ++i){
      if(dv.get(i).equals(word)) {
        frequency += d.termFrequency(word);
      }
    }
  }
  
  public ScoredDocument runquery(String query, int did){
    // Build query vector
    Scanner s = new Scanner(query);
    Vector < String > qv = new Vector < String > ();
    while (s.hasNext()){
      String term = s.next();
      qv.add(term);
    }

    // Get the document vector. For hw1, you don't have to worry about the
    // details of how index works.
    Document d = _index.getDoc(did);
    Vector < String > dv = d.get_title_vector();

    // Score the document. Here we have provided a very simple ranking model,
    // where a document is scored 1.0 if it gets hit by at least one query term.
    double score = 0.0;
    for (int i = 0; i < dv.size(); ++i){
      for (int j = 0; j < qv.size(); ++j){
        if (dv.get(i).equals(qv.get(j))){
          score = score + Math.log((1 - lambda) * d.termFrequency(qv.get(j)) / d.termFrequency() + lambda * getWordFrequency(qv.get(j)) / getAllWordFrequency());
          break;
        }
      }
    }
    return new ScoredDocument(did, d.get_title_string(), score);
  }
}
